{"version":3,"sources":["webpack://rps_site/./src/templates/Post.js"],"names":["PostSlices","slices","map","slice","index","slice_type","key","className","RichText","render","primary","text","raw","quote","src","image","url","PostBody","blogPost","id","fluid","title","length","style","textAlign","title_text","title_image","body","data","post","prismicPost","charAt"],"mappings":"+KAkEMA,EAAa,SAAC,GAChB,OAD6B,EAAZC,OAENC,KAAI,SAACC,EAAOC,GACf,OAAQ,WACJ,OAAQD,EAAME,YACV,IAAK,OACD,OACI,gBAAC,IAAD,CAAWC,IAAKF,EAAQD,EAAME,WAAYE,UAAU,QAChD,gBAAC,EAAAC,SAAD,CACIF,IAAKF,EACLK,OAAQN,EAAMO,QAAQC,KAAKC,KAAO,MAKlD,IAAK,QACD,OACI,8BACIN,IAAKF,EAAQD,EAAME,YAClBG,kBAAgBL,EAAMO,QAAQG,MAAMD,MAIjD,IAAK,qBACD,OACI,gBAAC,IAAD,CAAWN,IAAKF,EAAQD,EAAME,YAC1B,gBAAC,IAAD,CACIE,UAAU,iBACVO,IAAKX,EAAMO,QAAQK,MAAMC,QAzBzC,OAoCdC,EAAW,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,GACzB,OACI,gCACI,gBAAC,IAAD,CAAWC,OAAK,EAACb,UAAU,+CAChBD,IAAKa,GACZ,gBAAC,IAAD,CAAWZ,UAAU,2CACjB,sBAAIA,UAAU,SACsC,IAA/CC,kBAAgBU,EAASG,MAAMT,KAAKU,QAClCd,kBAAgBU,EAASG,MAAMT,MAGtC,qBAAGW,MAAO,CAACC,UAAW,WAAgE,IAApDhB,kBAAgBU,EAASO,WAAWb,KAAKU,QACxEd,kBAAgBU,EAASO,WAAWb,OAE3C,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOL,UAAU,YAAYO,IAAKI,EAASQ,YAAYV,QAG/D,gBAAC,IAAD,CAAWT,UAAU,oDACjB,gBAACP,EAAD,CAAYC,OAAQiB,EAASS,UAsB7C,UAfa,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,IAAKA,EACD,OAAO,KAEX,IAAMC,EAAOD,EAAKE,YAAYF,KAE9B,OACI,gCACI,gBAAC,IAAD,MACA,gBAACX,EAAD,CAAUC,SAAUW,EAAMV,GAAIS,EAAKE,YAAYF,KAAKF,YAAYV,IAAIe,OAAO,KAC3E,gBAAC,IAAD","file":"component---src-templates-post-js-af45dd0fe3b677ecc1a2.js","sourcesContent":["import React from 'react'\nimport {graphql} from 'gatsby'\nimport {RichText} from 'prismic-reactjs'\nimport Header from \"../components/common/Header\";\nimport Footer from \"../components/common/Footer\";\nimport {Container, Image} from \"react-bootstrap\";\nimport \"../styles/blogPosts.css\"\n\nexport const query = graphql`\n  query BlogPostQuery($uid: String) {\n    prismicPost(uid: { eq: $uid }) {\n      id\n      uid\n      lang\n      type\n      url\n      data {\n        title_image {\n                alt\n                url\n            }\n            title_text {\n            raw\n            }\n            title {\n              raw\n            }\n        body {\n          ... on PrismicPostBodyText {\n            slice_label\n            slice_type\n            primary {\n              text {\n                raw\n              }\n            }\n          }\n          ... on PrismicPostBodyQuote {\n            slice_label\n            slice_type\n            primary {\n              quote {\n                raw\n              }\n            }\n          }\n          ... on PrismicPostBodyImageWithCaption {\n            id\n            slice_label\n            slice_type\n            primary {\n              image {\n                alt\n                url\n              }\n              caption {\n                raw\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst PostSlices = ({slices}) => {\n    return (\n        slices.map((slice, index) => {\n            return (() => {\n                switch (slice.slice_type) {\n                    case 'text':\n                        return (\n                            <Container key={index + slice.slice_type} className=\"mt-4\">\n                                <RichText\n                                    key={index}\n                                    render={slice.primary.text.raw || []}\n                                />\n                            </Container>\n                        )\n\n                    case 'quote':\n                        return (\n                            <blockquote\n                                key={index + slice.slice_type}>\n                                {RichText.asText(slice.primary.quote.raw)}\n                            </blockquote>\n                        )\n\n                    case 'image_with_caption':\n                        return (\n                            <Container key={index + slice.slice_type}>\n                                <Image\n                                    className=\"postImage mt-4\"\n                                    src={slice.primary.image.url}/>\n                            </Container>\n                        )\n\n                    default:\n                }\n            })()\n        })\n    )\n}\n\nconst PostBody = ({blogPost, id}) => {\n    return (\n        <>\n            <Container fluid className=\"d-flex flex-wrap justify-content-center mt-5\"\n                       key={id}>\n                <Container className=\"d-flex flex-wrap justify-content-center\">\n                    <h4 className=\"title\">\n                        {RichText.asText(blogPost.title.raw).length !== 0\n                        && RichText.asText(blogPost.title.raw)\n                        }\n                    </h4>\n                    <p style={{textAlign: \"center\"}}>{RichText.asText(blogPost.title_text.raw).length !== 0\n                    && RichText.asText(blogPost.title_text.raw)}</p>\n                </Container>\n                <Container>\n                    <Image className=\"postImage\" src={blogPost.title_image.url}/>\n                </Container>\n            </Container>\n            <Container className=\"postText d-flex flex-wrap justify-content-center\">\n                <PostSlices slices={blogPost.body}/>\n            </Container>\n\n        </>\n    )\n}\n\nconst Post = ({data}) => {\n    if (!data) {\n        return null\n    }\n    const post = data.prismicPost.data\n\n    return (\n        <>\n            <Header/>\n            <PostBody blogPost={post} id={data.prismicPost.data.title_image.url.charAt(8)}/>\n            <Footer/>\n        </>\n    )\n}\n\nexport default Post\n"],"sourceRoot":""}